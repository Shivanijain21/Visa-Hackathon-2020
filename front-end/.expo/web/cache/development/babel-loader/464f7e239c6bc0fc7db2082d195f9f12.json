{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/latifatozoya/Desktop/VisaHackathon/Visa-Hackathon-2020/front-end/Pages/Transaction/DigitButton.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from 'react-native-paper';\nvar styles = StyleSheet.create({\n  button: {\n    marginVertical: 35,\n    marginLeft: 50,\n    marginRight: 50\n  },\n  text: {\n    color: '#FFFF',\n    fontSize: 25,\n    fontWeight: 'bold'\n  }\n});\nexport default function (_ref) {\n  var digit = _ref.digit,\n      amount = _ref.amount,\n      setAmount = _ref.setAmount;\n\n  var addDigit = function addDigit() {\n    if (digit === '.' && (!amount || amount.includes('.'))) {\n      console.log('Invalid input');\n      return;\n    }\n\n    var _amount$split = amount.split('.'),\n        _amount$split2 = _slicedToArray(_amount$split, 2),\n        wholePart = _amount$split2[0],\n        decimalPart = _amount$split2[1];\n\n    if (digit === '<' && amount.length > 0) {\n      setAmount(amount.substr(0, amount.length - 1));\n      return;\n    }\n\n    if (wholePart && wholePart.length === 4) {\n      if (digit !== '.' && !amount.includes('.')) {\n        console.log('Max whole part reached');\n        return;\n      }\n    }\n\n    if (decimalPart && decimalPart.length === 2) {\n      console.log('Max decimal part reached');\n      return;\n    }\n\n    if (digit !== '<') {\n      setAmount(amount + digit);\n    }\n  };\n\n  return React.createElement(Button, {\n    contentStyle: styles.button,\n    labelStyle: styles.text,\n    compact: \"true\",\n    mode: \"text\",\n    onPress: function onPress() {\n      return addDigit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }\n  }, digit);\n}","map":{"version":3,"sources":["/Users/latifatozoya/Desktop/VisaHackathon/Visa-Hackathon-2020/front-end/Pages/Transaction/DigitButton.js"],"names":["React","Button","styles","StyleSheet","create","button","marginVertical","marginLeft","marginRight","text","color","fontSize","fontWeight","digit","amount","setAmount","addDigit","includes","console","log","split","wholePart","decimalPart","length","substr"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAChCC,EAAAA,MAAM,EAAE;AACPC,IAAAA,cAAc,EAAE,EADT;AAEPC,IAAAA,UAAU,EAAE,EAFL;AAGPC,IAAAA,WAAW,EAAE;AAHN,GADwB;AAMhCC,EAAAA,IAAI,EAAE;AACLC,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,UAAU,EAAE;AAHP;AAN0B,CAAlB,CAAf;AAaA,eAAe,gBAAwC;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AACtD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,QAAIH,KAAK,KAAK,GAAV,KAAkB,CAACC,MAAD,IAAWA,MAAM,CAACG,QAAP,CAAgB,GAAhB,CAA7B,CAAJ,EAAwD;AACvDC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;AACA;;AAJqB,wBAMWL,MAAM,CAACM,KAAP,CAAa,GAAb,CANX;AAAA;AAAA,QAMfC,SANe;AAAA,QAMJC,WANI;;AAQtB,QAAIT,KAAK,KAAK,GAAV,IAAiBC,MAAM,CAACS,MAAP,GAAgB,CAArC,EAAwC;AACvCR,MAAAA,SAAS,CAACD,MAAM,CAACU,MAAP,CAAc,CAAd,EAAiBV,MAAM,CAACS,MAAP,GAAgB,CAAjC,CAAD,CAAT;AACA;AACA;;AACD,QAAIF,SAAS,IAAIA,SAAS,CAACE,MAAV,KAAqB,CAAtC,EAAyC;AACxC,UAAIV,KAAK,KAAK,GAAV,IAAiB,CAACC,MAAM,CAACG,QAAP,CAAgB,GAAhB,CAAtB,EAA4C;AAC3CC,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA;AACA;AACD;;AACD,QAAIG,WAAW,IAAIA,WAAW,CAACC,MAAZ,KAAuB,CAA1C,EAA6C;AAC5CL,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AACA;;AACD,QAAIN,KAAK,KAAK,GAAd,EAAmB;AAClBE,MAAAA,SAAS,CAACD,MAAM,GAAGD,KAAV,CAAT;AACA;AACD,GAzBD;;AA2BA,SACC,oBAAC,MAAD;AACC,IAAA,YAAY,EAAEX,MAAM,CAACG,MADtB;AAEC,IAAA,UAAU,EAAEH,MAAM,CAACO,IAFpB;AAGC,IAAA,OAAO,EAAC,MAHT;AAIC,IAAA,IAAI,EAAC,MAJN;AAKC,IAAA,OAAO,EAAE;AAAA,aAAMO,QAAQ,EAAd;AAAA,KALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOEH,KAPF,CADD;AAWA","sourcesContent":["import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\n\nconst styles = StyleSheet.create({\n\tbutton: {\n\t\tmarginVertical: 35,\n\t\tmarginLeft: 50,\n\t\tmarginRight: 50,\n\t},\n\ttext: {\n\t\tcolor: '#FFFF',\n\t\tfontSize: 25,\n\t\tfontWeight: 'bold',\n\t},\n});\n\nexport default function ({ digit, amount, setAmount }) {\n\tconst addDigit = () => {\n\t\tif (digit === '.' && (!amount || amount.includes('.'))) {\n\t\t\tconsole.log('Invalid input');\n\t\t\treturn;\n\t\t}\n\n\t\tconst [wholePart, decimalPart] = amount.split('.');\n\n\t\tif (digit === '<' && amount.length > 0) {\n\t\t\tsetAmount(amount.substr(0, amount.length - 1));\n\t\t\treturn;\n\t\t}\n\t\tif (wholePart && wholePart.length === 4) {\n\t\t\tif (digit !== '.' && !amount.includes('.')) {\n\t\t\t\tconsole.log('Max whole part reached');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (decimalPart && decimalPart.length === 2) {\n\t\t\tconsole.log('Max decimal part reached');\n\t\t\treturn;\n\t\t}\n\t\tif (digit !== '<') {\n\t\t\tsetAmount(amount + digit);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Button\n\t\t\tcontentStyle={styles.button}\n\t\t\tlabelStyle={styles.text}\n\t\t\tcompact='true'\n\t\t\tmode='text'\n\t\t\tonPress={() => addDigit()}\n\t\t>\n\t\t\t{digit}\n\t\t</Button>\n\t);\n}\n// index=main  sourcetype = vendor_sales/vendor_sales | table AcctID |stats count by AcctID\n"]},"metadata":{},"sourceType":"module"}