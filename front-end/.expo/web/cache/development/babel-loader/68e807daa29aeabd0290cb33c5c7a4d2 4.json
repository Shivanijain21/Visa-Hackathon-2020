{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckboxItem = exports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Checkbox = _interopRequireDefault(require(\"./Checkbox\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Checkbox/CheckboxItem.tsx\";\n\nvar CheckboxItem = function (_React$Component) {\n  (0, _inherits2.default)(CheckboxItem, _React$Component);\n\n  function CheckboxItem() {\n    (0, _classCallCheck2.default)(this, CheckboxItem);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CheckboxItem).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(CheckboxItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          status = _this$props.status,\n          label = _this$props.label,\n          onPress = _this$props.onPress,\n          labelStyle = _this$props.labelStyle,\n          colors = _this$props.theme.colors,\n          props = (0, _objectWithoutProperties2.default)(_this$props, [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\"]);\n      return React.createElement(_TouchableRipple.default, {\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, React.createElement(_reactNative.View, {\n        style: [styles.container, style],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        }\n      }, React.createElement(_Text.default, {\n        style: [styles.label, labelStyle, {\n          color: colors.primary\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      }, label), React.createElement(_Checkbox.default, (0, _extends2.default)({\n        status: status\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      }))));\n    }\n  }]);\n  return CheckboxItem;\n}(React.Component);\n\nexports.CheckboxItem = CheckboxItem;\n(0, _defineProperty2.default)(CheckboxItem, \"displayName\", 'Checkbox.Item');\n\nvar _default = (0, _theming.withTheme)(CheckboxItem);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","React","Component","style","status","label","onPress","labelStyle","colors","props","styles","color","StyleSheet","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAUA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,cAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AAEA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,sBAAA;;;;AA+DMA,IAAAA,Y;;;;;;;;;;6BAGK;AAAA,UAAA,WAAA,GASH,KATG,KAAA;AAAA,UAELG,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLC,MAHK,GAAA,WAAA,CAAA,MAAA;AAAA,UAILC,KAJK,GAAA,WAAA,CAAA,KAAA;AAAA,UAKLC,OALK,GAAA,WAAA,CAAA,OAAA;AAAA,UAMLC,UANK,GAAA,WAAA,CAAA,UAAA;AAAA,UAOIC,MAPJ,GAAA,WAAA,CAAA,KAAA,CAAA,MAAA;AAAA,UAQFC,KARE,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,YAAA,EAAA,OAAA,CAAA,CAAA;AAWP,aACE,KAAA,CAAA,aAAA,CAAC,gBAAA,CAAD,OAAA,EAAA;AAAiB,QAAA,OAAO,EAAxB,OAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;AAAwC,QAAA,aAAa,EAArD,MAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACA,MAAM,CAAP,KAAA,EAAA,UAAA,EAA2B;AAAEC,UAAAA,KAAK,EAAEH,MAAM,CAAvD;AAAwC,SAA3B,CAAb;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EADF,KACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAC,SAAA,CAAD,OAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AAAU,QAAA,MAAM,EAAhB;AAAA,OAAA,EAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EANN;AAMM;AAAA,OAAA,CAAA,CAJF,CADF,CADF;;;;EAduBP,KAAK,CAACC,S,CAA3BF;;;8BAAAA,Y,iBACiB,e;;eA0BR,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,YAAA,C;;;;AAKf,IAAMU,MAAM,GAAGE,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EANY;AACpB,GADoB;AAQ/Bb,EAAAA,KAAK,EAAE;AACLc,IAAAA,QAAQ,EATZ;AAQS;AARwB,CAAlBP,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport { Theme } from '../../types';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *\n *   render() {\n *     return(\n *       <View>\n *           <Checkbox.Item label=\"Item\" status=\"checked\" />\n *       </View>\n *     )\n *   }\n * }\n *```\n */\n\nclass CheckboxItem extends React.Component<Props> {\n  static displayName = 'Checkbox.Item';\n\n  render() {\n    const {\n      style,\n      status,\n      label,\n      onPress,\n      labelStyle,\n      theme: { colors },\n      ...props\n    } = this.props;\n\n    return (\n      <TouchableRipple onPress={onPress}>\n        <View style={[styles.container, style]} pointerEvents=\"none\">\n          <Text style={[styles.label, labelStyle, { color: colors.primary }]}>\n            {label}\n          </Text>\n          <CheckBox status={status} {...props}></CheckBox>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}