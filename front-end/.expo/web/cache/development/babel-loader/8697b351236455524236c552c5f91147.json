{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarText.tsx\";\nvar defaultSize = 64;\n\nvar AvatarText = function (_React$Component) {\n  (0, _inherits2.default)(AvatarText, _React$Component);\n\n  function AvatarText() {\n    (0, _classCallCheck2.default)(this, AvatarText);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AvatarText).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(AvatarText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          label = _this$props.label,\n          _this$props$size = _this$props.size,\n          size = _this$props$size === void 0 ? defaultSize : _this$props$size,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          labelStyle = _this$props.labelStyle,\n          color = _this$props.color,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"]);\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.primary : _ref$backgroundColor,\n          restStyle = (0, _objectWithoutProperties2.default)(_ref, [\"backgroundColor\"]);\n\n      var textColor = color || ((0, _color.default)(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : _colors.white);\n      return React.createElement(_reactNative.View, (0, _extends2.default)({\n        style: [{\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor: backgroundColor\n        }, styles.container, restStyle]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }), React.createElement(_Text.default, {\n        style: [styles.text, {\n          color: textColor,\n          fontSize: size / 2,\n          lineHeight: size\n        }, labelStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        }\n      }, label));\n    }\n  }]);\n  return AvatarText;\n}(React.Component);\n\n(0, _defineProperty2.default)(AvatarText, \"displayName\", 'Avatar.Text');\n(0, _defineProperty2.default)(AvatarText, \"defaultProps\", {\n  size: defaultSize\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AvatarText);\n\nexports.default = _default;","map":{"version":3,"sources":["AvatarText.tsx"],"names":["defaultSize","AvatarText","React","Component","size","label","style","theme","labelStyle","color","rest","backgroundColor","restStyle","StyleSheet","textColor","white","width","height","borderRadius","styles","fontSize","lineHeight","container","justifyContent","alignItems","text","textAlign","textAlignVertical"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const {\n      label,\n      size = defaultSize,\n      style,\n      theme,\n      labelStyle,\n      color,\n      ...rest\n    } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      color ||\n      (Color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n            labelStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"script"}