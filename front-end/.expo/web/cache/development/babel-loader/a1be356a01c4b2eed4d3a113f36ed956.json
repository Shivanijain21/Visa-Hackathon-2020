{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Badge.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar defaultSize = 20;\n\nvar Badge = function (_React$Component) {\n  (0, _inherits2.default)(Badge, _React$Component);\n\n  function Badge() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Badge);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Badge)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      opacity: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0)\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Badge, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          visible = _this$props.visible,\n          scale = _this$props.theme.animation.scale;\n\n      if (visible !== prevProps.visible) {\n        _reactNative.Animated.timing(this.state.opacity, {\n          toValue: visible ? 1 : 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          _this$props2$size = _this$props2.size,\n          size = _this$props2$size === void 0 ? defaultSize : _this$props2$size,\n          style = _this$props2.style,\n          theme = _this$props2.theme,\n          visible = _this$props2.visible,\n          rest = (0, _objectWithoutProperties2.default)(_this$props2, [\"children\", \"size\", \"style\", \"theme\", \"visible\"]);\n      var opacity = this.state.opacity;\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.notification : _ref$backgroundColor,\n          restStyle = (0, _objectWithoutProperties2.default)(_ref, [\"backgroundColor\"]);\n\n      var textColor = (0, _color.default)(backgroundColor).isLight() ? _colors.black : _colors.white;\n      var borderRadius = size / 2;\n      return React.createElement(_reactNative.Animated.Text, (0, _extends2.default)({\n        numberOfLines: 1,\n        style: [_objectSpread({\n          opacity: opacity,\n          backgroundColor: backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5\n        }, theme.fonts.regular, {\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius: borderRadius\n        }), styles.container, restStyle]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        }\n      }), children);\n    }\n  }]);\n  return Badge;\n}(React.Component);\n\n(0, _defineProperty2.default)(Badge, \"defaultProps\", {\n  visible: true,\n  size: defaultSize\n});\n\nvar _default = (0, _theming.withTheme)(Badge);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","React","Component","visible","size","opacity","Animated","prevProps","scale","toValue","duration","useNativeDriver","children","style","theme","rest","backgroundColor","restStyle","StyleSheet","textColor","black","white","borderRadius","color","fontSize","lineHeight","height","minWidth","styles","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      visible,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      size = defaultSize,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}