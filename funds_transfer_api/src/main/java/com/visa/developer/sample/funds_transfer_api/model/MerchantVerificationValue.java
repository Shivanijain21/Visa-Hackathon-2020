/*
 * *© Copyright 2018 - 2020 Visa. All Rights Reserved.**
 *
 * NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.*
 *
 *  By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy (developer.visa.com/privacy).In addition, all permissible uses of the Software must be in support of Visa products, programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com). **THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL FAULTS” BASIS WITHOUT WARRANTY OR  CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.** All brand names are the property of their respective owners, used for identification purposes only, and do not imply product endorsement or affiliation with Visa. Any links to third party sites are for your information only and equally  do not constitute a Visa endorsement. Visa has no insight into and control over third party content and code and disclaims all liability for any such components, including continued availability and functionality. Benefits depend on implementation details and business factors and coding steps shown are exemplary only and do not reflect all necessary elements for the described capabilities. Capabilities and features are subject to Visa’s terms and conditions and may require development,implementation and resources by you based on your business and operational details. Please refer to the specific API documentation for details on the requirements, eligibility and geographic availability.*
 *
 * This Software includes programs, concepts and details under continuing development by Visa. Any Visa features,functionality, implementation, branding, and schedules may be amended, updated or canceled at Visa’s discretion.The timing of widespread availability of programs and functionality is also subject to a number of factors outside Visa’s control,including but not limited to deployment of necessary infrastructure by issuers, acquirers, merchants and mobile device manufacturers.*
 *
 */

/*
 * Funds Transfer API
 * The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.visa.developer.sample.funds_transfer_api.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Merchant Verification Value(MVV) is used to identify merchants that participate in a variety of programs. The MVV is unique to the merchant.
 */
@ApiModel(description = "Merchant Verification Value(MVV) is used to identify merchants that participate in a variety of programs. The MVV is unique to the merchant.")
public class MerchantVerificationValue {


    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @JsonProperty("mvvAcquirerAssigned")
    private String mvvAcquirerAssigned = null;


    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @JsonProperty("mvvVisaAssigned")
    private String mvvVisaAssigned = null;

    public MerchantVerificationValue mvvAcquirerAssigned(String mvvAcquirerAssigned) {
        this.mvvAcquirerAssigned = mvvAcquirerAssigned;
        return this;
    }


    /**
     * Visa assists the acquirer in assigning the last four. E.g. 98FC
     *
     * @return mvvAcquirerAssigned
     **/
    @ApiModelProperty(required = true, value = "Visa assists the acquirer in assigning the last four. E.g. 98FC")
    public String getMvvAcquirerAssigned() {
        return mvvAcquirerAssigned;
    }

    public void setMvvAcquirerAssigned(String mvvAcquirerAssigned) {
        this.mvvAcquirerAssigned = mvvAcquirerAssigned;
    }

    public MerchantVerificationValue mvvVisaAssigned(String mvvVisaAssigned) {
        this.mvvVisaAssigned = mvvVisaAssigned;
        return this;
    }


    /**
     * Visa assigned MVV value. E.g. 0A45AF
     *
     * @return mvvVisaAssigned
     **/
    @ApiModelProperty(required = true, value = "Visa assigned MVV value. E.g. 0A45AF")
    public String getMvvVisaAssigned() {
        return mvvVisaAssigned;
    }

    public void setMvvVisaAssigned(String mvvVisaAssigned) {
        this.mvvVisaAssigned = mvvVisaAssigned;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MerchantVerificationValue merchantVerificationValue = (MerchantVerificationValue) o;
        return Objects.equals(this.mvvAcquirerAssigned, merchantVerificationValue.mvvAcquirerAssigned) &&
                Objects.equals(this.mvvVisaAssigned, merchantVerificationValue.mvvVisaAssigned);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mvvAcquirerAssigned, mvvVisaAssigned);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MerchantVerificationValue {\n");

        sb.append("    mvvAcquirerAssigned: ").append(toIndentedString(mvvAcquirerAssigned)).append("\n");
        sb.append("    mvvVisaAssigned: ").append(toIndentedString(mvvVisaAssigned)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


}



